import java.util.function.Consumer

buildscript {
    ext.kotlin_version = '1.3.40'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.0.0'

    id 'org.spongepowered.plugin' version '0.9.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'com.qixalite.spongestart2' version '4.0.0'
}

apply plugin: 'kotlin'

allprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
    }
}

archivesBaseName = 'BoxOUtils'

repositories {
    maven {
        url 'https://jitpack.io'
    }
    mavenCentral()
}

dependencies {
    compileOnly 'org.spongepowered:spongeapi:7.1.0'
    annotationProcessor 'org.spongepowered:spongeapi:7.1.0'

    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

    testCompile 'org.spongepowered:spongeapi:7.1.0'

    gradle.ext.alwaysIncludedIntegrations.each { testCompile(project("integrations:$it")) }

    testRuntime 'org.slf4j:slf4j-simple:1.7.25'
}

sponge.plugin.id = 'box-o-utils'

shadowJar {
    classifier = null
    withIntegrations { proj -> from proj.jar.outputs.files }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
    systemProperty 'bou.is_testing', 'true'
}

license {
    header = rootProject.file('LICENSE')

    include '**/*.java', '**/*.kt'

    newLine = false
}

spongestart {
    minecraft '1.12.2'
}

task('sourcesJar', type: Jar) {
    dependsOn 'classes'
    archiveClassifier.set('sources')
    afterEvaluate {
        from sourceSets['main'].allSource
        withIntegrations { proj -> from proj.sourceSets['main'].allSource }
    }
}

task('javadocJar', type: Jar) {
    dependsOn 'javadoc'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    withIntegrations { proj -> from proj.javadoc.destinationDir }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'box-o-utils'
            version = version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

def withIntegrations(Consumer<Project> action) {
    try {
        for (path in project('integrations').subprojects) {
            action.accept(path)
        }
    } catch (UnknownProjectException ignore) {
    }
}

if (project.file('local.gradle').exists()) {
    // in case anyone wants to have additional tasks
    apply from: 'local.gradle'
}

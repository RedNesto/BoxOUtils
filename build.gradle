buildscript {
    ext.kotlin_version = '1.5.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'

    id 'org.cadixdev.licenser' version '0.6.0'
}

apply plugin: 'kotlin'

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.cadixdev.licenser'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven {
            url 'https://repo.spongepowered.org/maven/'
        }
        maven {
            url 'https://jitpack.io'
        }
    }

    license {
        header = rootProject.file('LICENSE')

        include '**/*.java', '**/*.kt'

        newLine = false
    }
}

archivesBaseName = 'BoxOUtils'

dependencies {
    compileOnly "org.spongepowered:spongeapi:${spongeApiVersion}"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'

    testImplementation "org.spongepowered:spongeapi:${spongeApiVersion}"

    gradle.ext.alwaysIncludedIntegrations.each { testImplementation(project("integrations:$it")) }

    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.25'
}

build.dependsOn shadowJar
shadowJar {
    archiveClassifier.set(null)
    configurations = [] // We do not need to include anything else than the integrations
    withIntegrations { proj -> from proj.jar.outputs.files }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
    systemProperty 'bou.is_testing', 'true'
}

task('sourcesJar', type: Jar) {
    dependsOn 'classes'
    archiveClassifier.set('sources')
    afterEvaluate {
        from sourceSets['main'].allSource
        withIntegrations { proj -> from proj.sourceSets['main'].allSource }
    }
}

task('javadocJar', type: Jar) {
    dependsOn 'javadoc'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    withIntegrations { proj -> from proj.javadoc.destinationDir }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'box-o-utils'
            version = version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

def withIntegrations(Action<Project> action) {
    try {
        for (path in project('integrations').subprojects) {
            action.execute(path)
        }
    } catch (UnknownProjectException ignore) {
    }
}

if (project.file('local.gradle').exists()) {
    // in case anyone wants to have additional tasks
    apply from: 'local.gradle'
}

processResources {
    def props = [version: project.version, spongeApiVersion: spongeApiVersion]
    inputs.properties(props)
    filesMatching('mcmod.info') {
        expand(props)
    }
    exclude()
}

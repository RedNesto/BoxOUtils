import java.util.function.Consumer

plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.0.0'

    id 'org.spongepowered.plugin' version '0.9.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'com.qixalite.spongestart2' version '4.0.0'
}

allprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
    }
}

archivesBaseName = 'BoxOUtils'

repositories {
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url 'http://files.minecraftforge.net/maven'
    }
}

dependencies {
    compileOnly 'org.spongepowered:spongeapi:7.1.0'
    annotationProcessor 'org.spongepowered:spongeapi:7.1.0'

    compileOnly 'com.github.RedNesto:FileInventories:0.3.2'
    compileOnly 'com.github.randombyte-developer:byte-items:v2.3'
    compileOnly 'me.ryanhamshire:griefprevention:1.12.2-4.3.0.662:api'
}

sponge.plugin.id = 'box-o-utils'

shadowJar {
    classifier = null
    withIntegrations { proj -> from proj.jar.outputs.files }
}

license {
    header = rootProject.file('LICENSE')

    include '**/*.java'

    newLine = false
}

spongestart {
    minecraft '1.12.2'
}

task('sourcesJar', type: Jar) {
    dependsOn 'classes'
    archiveClassifier.set('sources')
    afterEvaluate {
        from sourceSets['main'].allSource
        withIntegrations { proj -> from proj.sourceSets['main'].allSource }
    }
}

task('javadocJar', type: Jar) {
    dependsOn 'javadoc'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    withIntegrations { proj -> from proj.javadoc.destinationDir }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = 'box-o-utils'
            version = version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

def withIntegrations(Consumer<Project> action) {
    for (path in project('integrations').subprojects) {
        action.accept(path)
    }
}

if (project.file('local.gradle').exists()) {
    // in case anyone wants to have additional tasks
    apply from: 'local.gradle'
}
